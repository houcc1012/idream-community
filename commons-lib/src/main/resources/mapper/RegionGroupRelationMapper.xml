<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.idream.commons.lib.mapper.RegionGroupRelationMapper">
    <resultMap id="BaseResultMap" type="com.idream.commons.lib.model.RegionGroupRelation">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="region_id" property="regionId" jdbcType="INTEGER"/>
        <result column="group_id" property="groupId" jdbcType="INTEGER"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
    </resultMap>
    <sql id="Base_Column_List">
        id, region_id, group_id, create_time
    </sql>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from region_group_relation
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete from region_group_relation
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <insert id="insert" parameterType="com.idream.commons.lib.model.RegionGroupRelation" useGeneratedKeys="true"
            keyProperty="id">
        insert into region_group_relation (region_id, group_id, create_time
        )
        values (#{regionId,jdbcType=INTEGER}, #{groupId,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}
        )
    </insert>
    <insert id="insertSelective" parameterType="com.idream.commons.lib.model.RegionGroupRelation"
            useGeneratedKeys="true" keyProperty="id">
        insert into region_group_relation
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="regionId != null">
                region_id,
            </if>
            <if test="groupId != null">
                group_id,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="regionId != null">
                #{regionId,jdbcType=INTEGER},
            </if>
            <if test="groupId != null">
                #{groupId,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.idream.commons.lib.model.RegionGroupRelation">
        update region_group_relation
        <set>
            <if test="regionId != null">
                region_id = #{regionId,jdbcType=INTEGER},
            </if>
            <if test="groupId != null">
                group_id = #{groupId,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.idream.commons.lib.model.RegionGroupRelation">
        update region_group_relation
        set region_id = #{regionId,jdbcType=INTEGER},
        group_id = #{groupId,jdbcType=INTEGER},
        create_time = #{createTime,jdbcType=TIMESTAMP}
        where id = #{id,jdbcType=INTEGER}
    </update>
    <select id="selectRegionIdByBookHouse" resultType="java.lang.Integer" parameterType="java.lang.Integer">
        SELECT
        a.region_id
        FROM
        region_group_relation a
        LEFT JOIN region_group_info b ON a.group_id = b.id
        AND b.category = 2
        WHERE
        b.id = #{bookId}
    </select>
    <select id="selectRegionIdsByGroupId" resultType="java.lang.Integer">
        SELECT a.region_id from region_group_relation a INNER JOIN region_info b ON a.region_id=b.id AND b.type=2 WHERE
        a.group_id=#{groupId}
    </select>
    <select id="selectCommunityByRegionId" resultType="com.idream.commons.lib.dto.region.RegionCommunityDto">
        SELECT
        b.id,
        b.`name` communityName,
        b.longitude,
        b.latitude,
        b.description,
        b.address,
        b.province,
        b.province_code,
        b.city,
        b.city_code,
        b.district,
        b.district_code,
        b.icon
        FROM
        region_group_relation a
        INNER JOIN region_group_info b ON a.group_id = b.id
        AND b.category = 1
        WHERE
        a.region_id =#{regionId}
    </select>

    <select id="selectBookRelateRegionByUserId" resultType="com.idream.commons.lib.model.RegionInfo">
        SELECT
        DISTINCT
        a.*
        FROM
        region_info a
        LEFT JOIN region_group_relation b ON region_id=a.id
        LEFT JOIN region_group_info c ON b.group_id=c.id
        LEFT JOIN user_manager d ON d.book_id=c.id AND c.category=2 AND d.`status`=1
        WHERE
        d.user_id = #{userId}
    </select>

    <select id="selectCommunityRegionId" resultType="com.idream.commons.lib.dto.app.CommunityInfoResponseDto">
        SELECT
        b.id communityId,
        b.`name` communityName,
        b.address,
        b.district_code adCode,
        (
        3959 * ACOS(
        COS(RADIANS(#{latitude})) * cos(radians(b.latitude)) * cos(
        RADIANS(b.longitude) - RADIANS(#{longitude})
        ) + sin(radians(#{latitude})) * sin(radians(b.latitude))
        )
        ) * 1609.344 AS distance,
        c.region_name regionName
        FROM
        region_group_relation a
        INNER JOIN region_group_info b ON a.group_id = b.id AND b.category = 1
        INNER JOIN region_info c ON a.region_id=c.id AND c.type=2
        WHERE a.region_id in (SELECT al.region_id from region_group_relation al INNER JOIN region_info bl ON
        al.region_id=bl.id AND bl.type=2 WHERE al.group_id=#{groupId})
    </select>
</mapper>