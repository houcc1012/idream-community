<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.idream.commons.lib.mapper.UserActivityCollectionMapper">
    <resultMap id="BaseResultMap" type="com.idream.commons.lib.model.UserActivityCollection">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="user_id" property="userId" jdbcType="INTEGER"/>
        <result column="activity_id" property="activityId" jdbcType="INTEGER"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
    </resultMap>
    <sql id="Base_Column_List">
        id, user_id, activity_id, create_time
    </sql>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from user_activity_collection
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete from user_activity_collection
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <insert id="insert" parameterType="com.idream.commons.lib.model.UserActivityCollection" useGeneratedKeys="true"
            keyProperty="id">
        insert into user_activity_collection (user_id, activity_id, create_time
        )
        values (#{userId,jdbcType=INTEGER}, #{activityId,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}
        )
    </insert>
    <insert id="insertSelective" parameterType="com.idream.commons.lib.model.UserActivityCollection"
            useGeneratedKeys="true" keyProperty="id">
        insert into user_activity_collection
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="userId != null">
                user_id,
            </if>
            <if test="activityId != null">
                activity_id,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="userId != null">
                #{userId,jdbcType=INTEGER},
            </if>
            <if test="activityId != null">
                #{activityId,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.idream.commons.lib.model.UserActivityCollection">
        update user_activity_collection
        <set>
            <if test="userId != null">
                user_id = #{userId,jdbcType=INTEGER},
            </if>
            <if test="activityId != null">
                activity_id = #{activityId,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.idream.commons.lib.model.UserActivityCollection">
        update user_activity_collection
        set user_id = #{userId,jdbcType=INTEGER},
        activity_id = #{activityId,jdbcType=INTEGER},
        create_time = #{createTime,jdbcType=TIMESTAMP}
        where id = #{id,jdbcType=INTEGER}
    </update>
    <select id="selectCollectionByUserId" parameterType="java.lang.Integer"
            resultType="com.idream.commons.lib.dto.user.AppUserCollectionDto">
        SELECT
        uac.id id,a.id activityId,a.title,a.subtitle,a.image,
        CASE WHEN e.start_time &gt; NOW() THEN 1
        WHEN e.end_time &gt; NOW() THEN 2
        ELSE 3 END AS activityStatus,
        CASE
        WHEN (SELECT COUNT(*) FROM activity_group_relation b INNER JOIN user_community_relation c ON
        c.community_id=b.group_id AND c.user_id=#{userId} WHERE a.id=b.activity_id AND b.group_type=60)
        THEN 1
        WHEN (SELECT COUNT(*) FROM activity_group_relation b INNER JOIN user_region_relation c ON c.region_id=b.group_id
        AND c.user_id=#{userId} WHERE a.id=b.activity_id AND b.group_type=40)
        THEN 2
        ELSE 3 END orderNum,
        CASE WHEN (SELECT COUNT(*) FROM user_activity_record b WHERE b.user_id=#{userId} AND b.activity_id=a.id) THEN 1
        ELSE 0 END joined,
        a.time_type,
        a.week_day,
        CASE WHEN e.start_time IS NULL THEN a.start_time ELSE e.start_time END AS startTime,
        CASE WHEN e.end_time IS NULL THEN a.end_time ELSE e.end_time END AS endTime,
        e.distanceCurrentDay
        from user_activity_collection uac
        left join
        activity_info a on uac.activity_id = a.id
        LEFT JOIN (SELECT activity_id, start_time, end_time, TIMESTAMPDIFF(SECOND,NOW(), start_time) AS
        distanceCurrentDay
        FROM activity_task WHERE NOW() &lt; end_time GROUP BY activity_id ORDER BY end_time) e ON e.activity_id=a.id
        WHERE
        uac.user_id = #{userId} and a.status=4
        order by uac.create_time desc

    </select>
</mapper>